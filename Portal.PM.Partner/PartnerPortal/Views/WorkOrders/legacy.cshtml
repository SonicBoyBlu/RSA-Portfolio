@{
    ViewBag.Title = "Work Order Review";
    ViewBag.TitleIcon = "fa-file-invoice-dollar";
    ViewBag.Nav = "invoices";

    var me = Identity.Current;
    var lastMonth = DateTime.Now;//.AddMonths(-1);
    var dateStart = new DateTime(lastMonth.Year, lastMonth.Month, 1);
    var dateEnd = dateStart.AddMonths(1).AddDays(-1);
}

    <div ng-app="quickBooks">
        @if (me.IsAdmin)
        {
            <div class="container-fluid">
                <fieldset class="d-none d-sm-flex">
                    <legend><i class="fa fa-cog"></i> Admin - {{(!advanced ? 'Standard Workflow' : 'Advanced Workflow')}}</legend>
                    <div class="pull-right">
                        <a href="" class="pull-right" data-toggle="tooltip" title="The advanced workflow is for manual uploading of work orders or troubleshooting import functionality. These functions are only needed if the regular functions do not work properly." ng-click="advanced=!advanced">{{(advanced ? 'Show Standard Workflow' : 'Show Advanced Workflow')}}</a>
                    </div>
                    <div class="row">
                        <div class="col">
                            <span id="btn-workorder-import" data-toggle="tooltip" title="After downloading the CSV reports from Breezeway, use this function to upload them to the Portal. When done, you can review the imported work orders." class="btn btn-outline-primary btn-block">
                                <i class="fa fa-file-upload"></i> 1 - Breezeway Import
                            </span>
                        </div>
                        <div class="col">
                            <div class="btn btn-outline-info d-block" data-toggle="tooltip" title="Use this function to sync existing customers from QBO to this system. This will correct any customers that show in this system as (~unit code). This is required from proper upload to QBO." id="btn-quickbooks-customer-sync">
                                <i class="fa fa-user-cog"></i> 2 - Sync Customers
                            </div>
                        </div>
                        <div class="col" ng-show="!advanced">
                            <a href="/Quickbooks" class="btn btn-outline-success d-none d-sm-block" data-toggle="tooltip" title="Use this navigation to open the QBO Upload Tool. That tool is used to upload work orders to QBO and remove them from the review tool, completing the process." id="btn-qbo-upload" target="_self">
                                <i class="fa fa-upload">
                                </i> 3 - Upload Invoices <small class="hidden">(Owners)</small>
                            </a>
                        </div>
                        <div class="col" ng-show="!advanced">
                            <a href="/Quickbooks/History" class="btn btn-outline-warning d-none d-sm-block" data-toggle="tooltip" title="Use this navigation to open the history of invoices uploaded to QBO." id="btn-qbo-history" target="_self">
                                <i class="fa fa-history">
                                </i> View Upload History <small class="hidden">(Owners)</small>
                            </a>
                        </div>
                        <div class="col" ng-show="advanced">
                            <a href="/WorkOrders/DownloadQuickBooksCSV" data-toggle="tooltip" title="This function will prepare and download a formatted CSV with all the WO ready to be imported to QBO using the QBO Import Tool in QBO." class="btn btn-outline-success d-none d-sm-block" id="btn-qbo-csv-download" target="_blank">
                                <i class="fa fa-file-archive">
                                </i> Manual 3 - Export CSV <small class="hidden">(Owners)</small>
                            </a>
                        </div>
                        <div class="col" ng-show="advanced">
                            <div class="btn btn-outline-danger d-none d-sm-block" id="btn-qbo-lock-approved" data-toggle="tooltip" title="This function is used when work orders were manually imported to QBO. Use this after the manual import to mark all of the work orders as committed, removing them from the review tool and completing the process.">
                                <i class="fa fa-unlock"></i> Manual 4 - Commit Records
                            </div>
                        </div>
                        <div class="col" ng-show="advanced">
                            <div class="btn btn-outline-warning d-block" id="btn-workorder-errors" data-toggle="tooltip" title="Use this function to review errors that may have occurred during step 1, importing work orders from Breezeway.">
                                <i class="fa fa-exclamation-triangle"></i> Import Error Log
                            </div>
                        </div>
                    </div>
                </fieldset>

                <hr />
            </div>
        }

        <div class="container-fluid">
            <div id="report-invoice-preview-cards"></div>
        </div>


        <div class="container-fluid">
            <div id="report-invoice-preview"></div>
        </div>

        <!-- Work Order Import -->
        @section modals {
            <div class="modal fade" id="mdl-workorder-upload" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title"><i class="fa fa-file-upload"></i> Upload Work Orders</h3>
                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"><i class="fa fa-times-circle text-danger"></i></span><span class="sr-only">Close</span></button>
                        </div>
                        <div class="modal-body">
                            <p id="csv-import-status"></p>
                            <form enctype="multipart/form-data" method="post" action="@Url.Action(" ImportWorkOrders", "WorkOrders" )" id="form-upload-work-orders">
                                <div class="row">
                                    <div class="col-3">
                                        CSV Files:
                                    </div>
                                    <div class="col-9">
                                        <input type="file" multiple accept=".csv" name="file[]" class="form-control" required />
                                    </div>
                                </div>
                                <div class="text-right">
                                    <div class="btn btn-outline-danger" data-dismiss="modal">Cancel</div> @* id="btn-preview-invoices"*@
                                    <button type="submit" class="btn btn-success" id="btn-upload">Upload</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Work Order Delete Confirm -->
            <div class="modal fade" id="mdl-workorder-delete-confirm" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title"><i class="fa fa-exclamation-triangle text-warning"></i> Confirm Edit</h3>
                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"><i class="fa fa-times-circle text-danger"></i></span><span class="sr-only">Close</span></button>
                        </div>
                        <div class="modal-body">
                            <p>
                                By editing this work order in Breezeway, the record will be removed from this preview and will need to be re-imported.
                            </p>
                            <p>
                                Do you wish to continue?
                            </p>
                        </div>
                        <div class="modal-footer text-right">
                            <div class="btn btn-outline-warning" data-dismiss="modal">Cancel</div>
                            <div class="btn btn-info btn-breeway-task-edit-confirm" data-task-id="" data-dismiss="modal">Proceed</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- QBO Commit Confirm -->
            <div class="modal fade" id="mdl-qbo-commit-confirm" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title text-danger"><i class="fa fa-exclamation-triangle"></i> Confirm QBO Commit</h3>
                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"><i class="fa fa-times-circle text-danger"></i></span><span class="sr-only">Close</span></button>
                        </div>
                        <div class="modal-body">
                            <p>
                                By confirming commit, you are verifying that these <strong class="qbo-commit-count"></strong> invoices have been imported into QuickBooks.  This will perminently lock the records, even for admins.  This action cannot be undone.
                            </p>
                            <p>
                                Do you wish to continue?
                            </p>
                        </div>
                        <div class="modal-footer text-right">
                            <div class="btn btn-outline-warning" data-dismiss="modal">Cancel</div>
                            <div class="btn btn-danger" id="btn-qbo-lock-confirm" data-dismiss="modal">Commit</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Show Error log -->
            <div class="modal fade" id="mdl-workorder-errors" tabindex="-1" role="dialog">
                <div class="modal-dialog modal-xl" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title text-danger"><i class="fa fa-exclamation-triangle"></i> Import Error Log</h3>
                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"><i class="fa fa-times-circle text-danger"></i></span><span class="sr-only">Close</span></button>
                        </div>
                        <div class="modal-body"></div>
                    </div>
                </div>
            </div>
        </div>
}
@*
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <img src="..." class="rounded mr-2" alt="...">
            <strong class="mr-auto">Bootstrap</strong>
            <small>11 mins ago</small>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">
            Hello, world! This is a toast message.
        </div>
    </div>
*@


@section Scripts {
    <script type="text/javascript">
        $(function () {
            // https://github.com/CodeSeven/toastr
            toastr.options = {
                "closeButton": true,
                "closeHtml": "<button><i class='fa fa-arrow-right'></i></button>",
                "debug": true,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": "toast-bottom-right",
                "preventDuplicates": true,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "300000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut",
                "escapeHtml": false
            };
            //toastr.success("Test", "Success");
            //toastr.info("Testing", "Info");

            Invoices.fetch.preview(false, true);
            //$(".toast").toast("show");
        });


        var Invoices = {
            config: {
                updates: false,
                lastTab: 0,
                dates: {
                    start: "@dateStart.ToShortDateString()",
                    end: "@dateEnd.ToShortDateString()"
                },
                cache: false,
                commitCount: 0,
                progressToast: null,
                uploadProgress: 0,
                progressReset: true,
                progress: {
                    timer: null
                }
            },
            search: {
                unitCode: function (showLoading, supressCount) {
                    var code = $('[data-filter="unit-code"]').val().trim().toUpperCase(),
                        c = $("#preview-invoice-inner");
                    $(".tab-content", c).animate({ opacity: 0 }, "fast", function () { if(showLoading) $("#rpt-invoice-loading").show(); });
                    if (code === "") $("[data-unit-id]", c).removeClass("hidden");
                    else {
                        $("[data-unit-id]", c).addClass("hidden");
                        $("[data-unit-id*='" + code + "']", c).removeClass("hidden");
                        $("[data-customer-name*='" + code + "']", c).removeClass("hidden");
                        $("[data-invoice-num*='" + code + "']", c).removeClass("hidden");
                        $("#fltr-invoice-balance").val(0);
                        debugger;
                        $("#chk-show-committed").prop("checked", true);
                    }
                    if(supressCount !== true)
                        Invoices.render.tabCounts();
                    setTimeout(function () {
                        $(".fa-search").removeClass("fa-spin");
                        $(".tab-content", c).animate({ opacity: 1 }, function () { $("#rpt-invoice-loading").hide(); });
                    }, 400);
                },
                balances: function () {
                    var val = $("#fltr-invoice-balance").val(),
                        c = $("#preview-invoice-inner");
                    if (val == 0) $("[data-balance]", c).removeClass("hidden");
                    else if (val == 1) {
                        $("[data-balance]", c).removeClass("hidden");
                        $("[data-balance='0']", c).addClass("hidden");
                    } else {
                        $("[data-balance]", c).addClass("hidden");
                        $("[data-balance='0']", c).removeClass("hidden");
                    }
                    console.log("Balances filtered");
                    Invoices.render.tabCounts();
                }
            },
            fetch: {
                preview: function (showLoading, init) {
                    //debugger;
                    var c = $("#report-invoice-preview"),
                        dates = Invoices.config.dates,
                        showCommitted = $("#chk-show-committed").is(":checked");
                    if (showCommitted) Invoices.config.cache = false;
                    console.warn("Preview caching: " + Invoices.config.cache);

                    //debugger;
                    Invoices.fetch.cards();

                    $.ajax({
                        url: "@Url.Action("FetchPreview", "WorkOrders")",
                        data: {
                            tab: Invoices.config.lastTab,
                            dateStart: dates.start,
                            dateEnd: dates.end,
                            query: $('[data-filter="unit-code"]').val(),
                            type: $("#lst-task-type").val() || "Property Care",
                            filter: $("#fltr-invoice-balance").val() || 1,
                            init: init,
                            showCommitted: showCommitted
                        },
                        dataType: "html",
                        //cache: Invoices.config.cache,
                        success: function (d)
                        {
                            //debugger;
                            c.html(d);
                            $(".nav-tabs .nav-item:first").tab("show");
                            $(".fa-sync").removeClass("fa-spin");
                            Invoices.search.unitCode(showLoading, true);
                            //Invoices.render.tabCounts();
                            Invoices.config.update = false;
                            Invoices.config.cache = true;
                            //Invoices.fetch.cards();
                            if ($(window).width() < 768)
                                $(".tab-pane .table-responsive.collapse").removeClass("show");
                            else
                                $(".tab-pane .table-responsive.collapse").addClass("show");
                            if (Invoices.config.lastTab)
                                $(".nav-tabs .nav-item[data-tab-id='" + Invoices.config.lastTab + "']").tab("show");
                            else
                                $(".nav-tabs .nav-item:first").tab("show");

                            // http://www.daterangepicker.com/#usage
                            $('input#work-order-date-range').daterangepicker({
                                opens: 'left',
                                startDate: Invoices.config.dates.start,
                                endDate: Invoices.config.dates.end,
                                showDropdowns: true,
                                autoApply: true
                            },
                            function (start, end, label) {
                                console.log("A new date selection was made: " + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD'));
                                //debugger;
                                Invoices.config.dates = {
                                    start: start.format("M/D/YYYY"),
                                    end: end.format("M/D/YYYY")
                                };
                                Invoices.fetch.preview();
                                });
                            Invoices.search.balances();
                            if ($('[data-filter="unit-code"]').val()) Invoices.search.unitCode(true);
                        },
                        beforeSend: function () {
                            c.html("<div class='text-center'><i class='fa fa-5x fa-cog fa-spin'></i></div>");
                            $(".fa-sync").addClass("fa-spin");
                            $("#tabs-preview-invoices .count").html("<i class='fa fa-spinner fa-span'></i>");
                        },
                        error: function (xhr, desc, err)
                        {
                            console.error(xhr);
                        }
                    });
                },
                cards: function () {
                    var c = $("#report-invoice-preview-cards"),
                        dates = Invoices.config.dates;
                    $.ajax({
                        url: "@Url.Action("FetchPreviewCards", "WorkOrders")",
                        data: {
                            dateStart: dates.start,
                            dateEnd: dates.end,
                            query: $('[data-filter="unit-code"]').val(),
                            type: $("#lst-task-type").val()
                        },
                        dataType: "html",
                        cache: Invoices.config.cache,
                        success: function (d) {
                            c.html(d);
                        },
                        beforeSend: function () {
                            c.html("<div class='text-center'><i class='fa fa-cog fa-spin fa-3x'></i><div>");
                        }
                    });
                },
                QboFile: function () {
                    var dates = Invoices.config.dates;
                    return "?dateStart=" + dates.start + " &dateEnd=" + dates.end;
                    /*
                    $.ajax({
                        url: "Url.Action("DownloadQuickBooksCSV", "WorkOrders")",
                        data: { dateStart: dates.start, dateEnd: dates.end},
                        success: function (d) {
                            console.info("QBO download status: " + d.status);
                        }
                    });
                    */
                }
            },
            render: {
                tabCounts: function () {
                    //Invoices.fetch.cards();
                    $("#rpt-invoice-loading").show();
                    $("#tabs-preview-invoices .count").each(function () {
                        var i = $(this),
                            t = i.closest(".nav-item"),
                            id = t.attr("href"),
                            c = $(id),
                            items = $("div[data-unit-id]", c),
                            count = 0;
                        items.each(function () {
                            if (!$(this).hasClass("hidden"))
                                count++;
                        });
                        console.log(id + ": " + count);
                        i.text("(" + count + ")");

                        if (count === 0) $(".rpt-zero-items", c).removeClass("hidden");
                        else $(".rpt-zero-items", c).addClass("hidden");

                    });
                    $("#rpt-invoice-loading").hide();
                    Invoices.config.cache = false;
                    Invoices.config.update = true;
                    console.log("tabs counted");
                },
                uploadProgress: function () {
                    if (!Invoices.config.progressToast)
                        Invoices.config.progressToast = toastr.info("...", "Inintializing", { timeOut: 0 });
                    Invoices.config.progress.timer = setInterval(function () {
                        //debugger;
                        $.ajax({
                            url: "@Url.Action("ProgressPoll", "WorkOrders")",
                            data: { Reset: Invoices.config.progressReset },
                            success: function (d) {
                                d = d.res;
                                console.log("Is Complete: " + d.IsProcessing);
                                //debugger;
                                if (d.IsProcessing === false) {
                                    clearInterval(Invoices.config.progress.timer);
                                    if(Invoices.config.progressToast)
                                        Invoices.config.progressToast.fadeOut();
                                    Invoices.config.uploadProgress = 0;
                                    Invoices.config.progressReset = true;
                                } else {
                                    Invoices.config.progressToast.find(".toast-title").text(d.Title);
                                    Invoices.config.progressToast.removeClass("toast-info toast-success toast-warning toast-primary toast-danger toast-error").addClass(d.ToastrClass);
                                    Invoices.config.progressToast.find(".toast-message").html(d.Body);
                                    /*
                                    Invoices.config.progressReset = false;
                                    Invoices.config.uploadProgress = d.Progress;
                                    Invoices.config.uploadProgress = ((d.Complete / d.Total) * 100);
                                    //Invoices.config.progressToast.find(".toast-message").text(Invoices.config.uploadProgress + "%");
                                    debugger;
                                    Invoices.config.progressToast.find(".toast-message").html("<i class='fa fa-check-circle text-success'></i> " + Invoices.config.uploadProgress + "%");
                                    */
                                }
                            }
                        });
                    }, 1500);

                }
            },
            update: {
                billTo: function (id, type) {
                    if (id && type) {
                        var dd = $("select[data-bill-to][data-id='" + id + "']");
                        console.log("invoice: " + id + " type: " + type);
                        $.ajax({
                            url: "@Url.Action("UpdateBillTo", "WorkOrders")",
                            data: { id: id, type: type },
                            beforeSend: function () {
                                dd.addClass("disabled").prop("disabled", true);
                            },
                            success: function () {
                                dd.removeClass("disabled").prop("disabled", false);
                                Invoices.config.updates = true;
                                var bg,
                                    n = {
                                        msg: "Update Work Order #" + id,
                                        title: "Bill to: " + type
                                    };
                                switch (type) {
                                    case "Owner": bg = "success"; toastr.success(n.title, n.msg); break;
                                    case "No Charge/Internal": bg = "info"; toastr.info(n.title, n.msg); break;
                                    default: bg = "warning"; toastr.warning(n.title, n.msg); break;
                                }
                                var item = $(dd.closest("[data-invoice-num]"));
                                item.removeClass("alert-success alert-warning alert-info").addClass("alert alert-" + bg);

                                setTimeout(function () {
                                    if (type != "Owner" && type != "No Charge/Internal")
                                        type = "Other";
                                    if (type == "Owner") type = "Reviewed";
                                    item.fadeOut().remove();
                                    $("[data-tab-type='" + type + "']").append($("<div/>").attr("data-unit-id", id));
                                    Invoices.render.tabCounts();
                                }, 5*1000);
                            }
                        });
                    }
                },
                viewIgnore: function (id, show) {
                    //debugger;
                    $.ajax({
                        url: "@Url.Action("UpdateViewIgnore", "WorkOrders")",
                        data: { ID: id, IsShown: show },
                        success: function (d) {
                            Invoices.config.update = true;
                            var item = $("[data-invoice-num='" + id + "']"),
                                clone = item.clone();
                            item.fadeOut().remove();
                            //debugger;
                            if (show === false) {
                                $("#invoice-preview-tab-3").prepend(clone);
                            } else {
                                //debugger;
                                $("#invoice-preview-tab-" + item.data("tab-origin")).prepend(clone);
                            }
                            //debugger;
                            $("[data-filter='screened']", item).prop("data-switch", show == true ? false : true);
                            Invoices.render.tabCounts();
                            //debugger;
                            //TODO: wire up removal UI
                        }
                    });
                },
                locked: function(id, isLocked) {
                    $.ajax({
                        url: "@Url.Action("UpdateLock", "WorkOrders")",
                        data: { id: id, isLocked: isLocked },
                        success: function (d) {
                            var item = $("[data-invoice-num='" + id + "']"),
                                clone = item.clone();
                            item.fadeOut().remove();
                            Invoices.config.update = true;
                            if (isLocked === false) {
                                $("#invoice-preview-tab-4").prepend(clone);
                            }
                            Invoices.render.tabCounts();
                            var c = $("#invoice-preview-tab-4 [data-invoice-num='" + id + "']"),
                                btn = $(".btn-invoice-lock", c);
                            btn.removeClass("btn-*").addClass("btn-outline-dark").html("<i class='fa fa-lock'></i> Locked");
                        },
                        beforeSend: function () {
                            $(".btn-invoice-lock[data-invoice-num='" + id + "']").html("<i class='fa fa-cog fa-spin'></i> Locking").addClass("disabled").attr("title", "Locking this invoice");
                        }
                    });
                }
            },
            delete: {
                confirm: function(id) {
                    var mdl = $("#mdl-workorder-delete-confirm");
                    $(".btn-breeway-task-edit-confirm", mdl).data("task-id", id);
                    mdl.modal("show");
                },
                submit: function(id) {
                    $.ajax({
                        url: "@(Url.Action("DeleteRecord", "WorkOrders"))",
                        data: { id: id },
                        success: function (d) {
                            Invoices.config.update = true;
                            toastr.success("Work Order " + id + " Deleted");
                            $("[data-invoice-num='" + id + "']").fadeOut().remove();
                            window.open("https://app.breezeway.io/task/" + id, "Breezeway");
                        }
                    });
                }
        },
            commit: function(isConfirmed) {
                $.ajax({
                    url: "@Url.Action("QboCommit", "WorkOrders")",
                    data: { isConfirmed: isConfirmed },
                    success: function (d) {
                        Invoices.config.commitCount = parseInt(d.total);
                        $(".qbo-commit-count").text(d.total);
                        if (isConfirmed) {
                            toastr.success("QBO Commit Success", d.total + " invoices committed to QuickBooks Online");
                            Invoices.config.cache = false;
                            Invoices.fetch.preview(true, false);
                        } else {
                            $("#mdl-qbo-commit-confirm").modal("show");

                        }
                    }
                });
            },
            import: {
                workOrders: function (formData, forceRetry) {
                    var mdl = $("#mdl-workorder-upload"),
                        status = $("#csv-import-status", mdl),
                        form = $("form", mdl);

                    //debugger;
                    if (forceRetry) {
                        //Invoices.config.progressToast.fadeOut();
                        formData.append("IsForceRetry", true);
                    }

                    //Progress indication
                    //debugger;
                    Invoices.render.uploadProgress();

                    $.ajax({
                        url: "@Url.Action("ImportWorkOrders", "WorkOrders")",
                        type: "post",
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (d)
                        {
                            console.log(d);
                            //debugger;
                            if (d.success === true) {
                                Invoices.fetch.preview(true, true);
                                mdl.modal("hide");
                                toastr.success(d.message);
                            } else {
                                toastr.error(d.error);
                                Invoices.import.workOrders(formData, true);
                            }
                        },
                        beforeSend: function () {
                            form.hide();
                            status.html("<span class='text-info'><i class='fa fa-cog fa-spin'></i> Loading.  Please wait...</span>").show();
                        },
                        error: function (xhr, desc, err)
                        {
                            debugger;
                            status.html("<span class='text-danger'>" + xhr.responseText + "</span>");
                            form.show();
                            console.error(xhr);
                        }
                    });
                }
            }
        };

        $(document).on("change", "#lst-task-type", function () {
            Invoices.fetch.preview();
        });

        $(document).on("click", "#tabs-preview-invoices .nav-item", function () {
            var i = $(this),
                id = i.data("tab-id");
            Invoices.config.lastTab = id;
        });

        $(document).on("show.bs.tab", function (e) {
            var t = $(e.target).attr("href"),
                c = $("div[data-unit-id]:visible", t),
                cnt = c.length;
            //debugger;
            /*
            if (cnt === 0) $(".rpt-zero-items", t).removeClass("hidden");
            else $(".rpt-zero-items", t).addClass("hidden");
            console.log(cnt);
            */
            if (Invoices.config.update == true)
                Invoices.fetch.preview();
        });

        $(document).on("click", "#btn-workorder-import", function () {
            var mdl = $("#mdl-workorder-upload"),
                status = $("#csv-import-status", mdl),
                form = $("form", mdl);
            status.hide();
            form.show();
            mdl.modal("show");
        });

        $(document).on("change", "#fltr-invoice-balance", function () {
            Invoices.search.balances();
        });

        $(document).on("change", "[data-bill-to]", function () {
            var i = $(this),
                id = i.data("id"),
                t = i.val();
            Invoices.update.billTo(id, t);
        });

        $(document).on("submit", "form", function (e) {
            e.preventDefault();
            var formData = new FormData(this);
            Invoices.import.workOrders(formData);
        });


        $(document).on("click", "#btn-preview-invoices, .btn-report-refresh", function () {
            Invoices.fetch.preview();
        });

        $(document).on("click", ".btn-search-invoices", function () {
            Invoices.search.unitCode();
        });
        $(document).on("keyup", "[data-filter='unit-code']", function (e) {
            //console.log("searching invoices...");
            //if (e.keyCode === 13)
                Invoices.search.unitCode();
        });
        $(document).on("focus", "[data-filter='unit-code']", function (e) {
            $(this).select();
        });

        $(document).on("change", "[data-filter='billable']", function () {
            var v = $(this).val(),
                    c = $("#preview-invoice-inner");
            if (v === "all") $("[data-bill-to]", c).removeClass("hidden");
            else {
                $("[data-bill-to]", c).addClass("hidden");
                $("[data-bill-to='" + v + "']", c).removeClass("hidden");
            }
        });

        //*
        $(document).on("click", "#btn-qbo-csv-download", function (e) {
            //e.preventDefault();
            var i = $(this),
                href = i.attr("href").split('?')[0],
                query = Invoices.fetch.QboFile();
            i.attr("href", function () {
                return href + query;
            });
        });
        //*/

        $(document).on("click", "#preview-invoice-inner [data-filter='screened']", function () {
            var i = $(this),
                id = i.data("id"),
                show = i.data("switch") === false ? true : false;
            //debugger;
            Invoices.update.viewIgnore(id, show);
        });

        $(document).on("click", ".btn-invoice-lock", function () {
            var i = $(this),
                id = i.data("invoice-num"),
                isLocked = i.data("locked"),
                isDisabled = i.hasClass("disabled");
            if (!isDisabled) {
                Invoices.update.locked(id, isLocked);
            }
        });

        $(document).on("click", ".btn-breeway-task-edit", function () {
            Invoices.delete.confirm($(this).data("task-id"));
        });
        $(document).on("click", ".btn-breeway-task-edit-confirm", function () {
            Invoices.delete.submit($(this).data("task-id"));
        });

        $(document).on("click", "#btn-qbo-lock-approved", function () {
            Invoices.commit(false);
        });
        $(document).on("click", "#btn-qbo-lock-confirm", function () {
            Invoices.commit(true);
        });

        $(document).on("click", "#btn-workorder-errors", function () {
            var mdl = $("#mdl-workorder-errors"),
                body = $(".modal-body", mdl);
            mdl.modal("show");
            $.ajax({
                url: "/WorkOrders/FetchErrorLog",
                beforeSend: function () {
                    body.html("loading");
                },
                success: function (d) {
                    body.html(d);
                }
            });
        });

        $(document).on("click", "#btn-quickbooks-customer-sync", function () {
            var i = $(this),
                icon = $(".fa", i);
            icon.removeClass("fa-user-cog").addClass("fa-sync fa-spin");
            $.ajax({
                url: "/WorkOrders/QboRefreshCustomers",
                success: function (d) {
                    icon.addClass("fa-user-cog").removeClass("fa-sync fa-spin");
                    toastr.success(d.message);
                }
            });
        });
    </script>
    @*
        <style type="text/css">
            .table {
                table-layout:fixed;
            }
        </style>
    *@
}
